# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class UserModi(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, _pass: str=None, option: int=None, modification: str=None):  # noqa: E501
        """UserModi - a model defined in Swagger

        :param id: The id of this UserModi.  # noqa: E501
        :type id: str
        :param _pass: The _pass of this UserModi.  # noqa: E501
        :type _pass: str
        :param option: The option of this UserModi.  # noqa: E501
        :type option: int
        :param modification: The modification of this UserModi.  # noqa: E501
        :type modification: str
        """
        self.swagger_types = {
            'id': str,
            '_pass': str,
            'option': int,
            'modification': str
        }

        self.attribute_map = {
            'id': 'id',
            '_pass': 'pass',
            'option': 'Option',
            'modification': 'Modification'
        }
        self.id = id
        self._id = id
        self.__pass = _pass
        self._option = option
        self._modification = modification

    @classmethod
    def from_dict(cls, dikt) -> 'UserModi':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UserModi of this UserModi.  # noqa: E501
        :rtype: UserModi
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this UserModi.


        :return: The id of this UserModi.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this UserModi.


        :param id: The id of this UserModi.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def _pass(self) -> str:
        """Gets the _pass of this UserModi.


        :return: The _pass of this UserModi.
        :rtype: str
        """
        return self.__pass

    @_pass.setter
    def _pass(self, _pass: str):
        """Sets the _pass of this UserModi.


        :param _pass: The _pass of this UserModi.
        :type _pass: str
        """
        if _pass is None:
            raise ValueError("Invalid value for `_pass`, must not be `None`")  # noqa: E501

        self.__pass = _pass

    @property
    def option(self) -> int:
        """Gets the option of this UserModi.


        :return: The option of this UserModi.
        :rtype: int
        """
        return self._option

    @option.setter
    def option(self, option: int):
        """Sets the option of this UserModi.


        :param option: The option of this UserModi.
        :type option: int
        """
        if option is None:
            raise ValueError("Invalid value for `option`, must not be `None`")  # noqa: E501

        self._option = option

    @property
    def modification(self) -> str:
        """Gets the modification of this UserModi.


        :return: The modification of this UserModi.
        :rtype: str
        """
        return self._modification

    @modification.setter
    def modification(self, modification: str):
        """Sets the modification of this UserModi.


        :param modification: The modification of this UserModi.
        :type modification: str
        """
        if modification is None:
            raise ValueError("Invalid value for `modification`, must not be `None`")  # noqa: E501

        self._modification = modification
