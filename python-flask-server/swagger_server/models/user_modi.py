# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class UserModi(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, user_name: str=None, password: str=None, option: int=None, modification: str=None):  # noqa: E501
        """UserModi - a model defined in Swagger

        :param user_name: The user_name of this UserModi.  # noqa: E501
        :type user_name: str
        :param password: The password of this UserModi.  # noqa: E501
        :type password: str
        :param option: The option of this UserModi.  # noqa: E501
        :type option: int
        :param modification: The modification of this UserModi.  # noqa: E501
        :type modification: str
        """
        self.swagger_types = {
            'user_name': str,
            'password': str,
            'option': int,
            'modification': str
        }

        self.attribute_map = {
            'user_name': 'UserName',
            'password': 'Password',
            'option': 'Option',
            'modification': 'Modification'
        }

        self._user_name = user_name
        self._password = password
        self._option = option
        self._modification = modification

    @classmethod
    def from_dict(cls, dikt) -> 'UserModi':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UserModi of this UserModi.  # noqa: E501
        :rtype: UserModi
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_name(self) -> str:
        """Gets the user_name of this UserModi.


        :return: The user_name of this UserModi.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name: str):
        """Sets the user_name of this UserModi.


        :param user_name: The user_name of this UserModi.
        :type user_name: str
        """
        if user_name is None:
            raise ValueError("Invalid value for `user_name`, must not be `None`")  # noqa: E501

        self._user_name = user_name

    @property
    def password(self) -> str:
        """Gets the password of this UserModi.


        :return: The password of this UserModi.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password: str):
        """Sets the password of this UserModi.


        :param password: The password of this UserModi.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def option(self) -> int:
        """Gets the option of this UserModi.


        :return: The option of this UserModi.
        :rtype: int
        """
        return self._option

    @option.setter
    def option(self, option: int):
        """Sets the option of this UserModi.


        :param option: The option of this UserModi.
        :type option: int
        """
        if option is None:
            raise ValueError("Invalid value for `option`, must not be `None`")  # noqa: E501

        self._option = option

    @property
    def modification(self) -> str:
        """Gets the modification of this UserModi.


        :return: The modification of this UserModi.
        :rtype: str
        """
        return self._modification

    @modification.setter
    def modification(self, modification: str):
        """Sets the modification of this UserModi.


        :param modification: The modification of this UserModi.
        :type modification: str
        """
        if modification is None:
            raise ValueError("Invalid value for `modification`, must not be `None`")  # noqa: E501

        self._modification = modification
