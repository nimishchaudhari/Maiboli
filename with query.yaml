openapi: 3.0.0
info:
  description: >
    Web service based on Maiboli: 
    https://nimishchaudhari.github.io/Maiboli/
  version: "0.2.9 with Query functions"
  title: "Maiboli API"
tags:
- name: "User"
  description: "Operations about Users"
paths:
  /query:
    post:
      summary: Queries for executing code
      description: >
        This post type request should input the following in a json format
        query*  string
        lang*  string
        user_id*  string
        passwd*  string
        Query should not have double quotes in the code, since that'll clash with the json double quotes
        lang codes: 
        mar - Marathi
        fr - French
        ur - Urdu
        gk - Greek
        
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserQuery'
      tags:
      - "Query"
      operationId: "execute_query"
      responses:
        "202":
          description: "Successful executed, returning response"
        "204":
          description: "Executed with an error in the query"
        "400":
          description: "Bad language request"
        "401":
          description: "Bad username / password"
        
      x-swagger-router-controller: "swagger_server.controllers.user_controller"
  /User:
    post:
      summary: Creates a customer.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      tags:
      - "User"
      operationId: "create_user"
      responses:
        "201":
          description: "Successful created"
        "409":
          description: "User already exists"
      x-swagger-router-controller: "swagger_server.controllers.user_controller"
    get:
      tags:
      - "User"
      summary: "Get Users"
      description: "Get all Users from the DB "
      operationId: "get_all_users"
      responses:
        "200":
          description: "OK"
        "404":
          description: "Not found"
      x-swagger-router-controller: "swagger_server.controllers.user_controller"
  /User/{id}/:
    put:
      tags:
      - "User"
      summary: "Modify user"
      description: "To modify a a username/Password "
      operationId: "modify_user"
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the customer to delete.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserModi"
      responses:
        "200":
          description: "updated successfully"
        "204":
          description: "No content "
        "404":
          description: "UserName not found "
      x-swagger-router-controller: "swagger_server.controllers.user_modi_controller"
    delete:
      tags:
      - "User"
      summary: "Delete user"
      description: "To delete a user entry"
      operationId: "delete_user"
      parameters:
      - name: "id"
        in: "path"
        description: "The username of the user that needs to be deleted"
        required: true
        schema:
            type: string
      responses:
        "200":
          description: "Deleted sucessfully"
        "404":
          description: "User not found"
      x-swagger-router-controller: "swagger_server.controllers.user_controller"
components:
  schemas:
    User:
      type: "object"
      required:
        - "id"
        - "passwd"
      properties:
        id:
          type: "string"
        passwd:
          type: "string"
      
    UserModi:
      type: "object"
      required:
      - "id"
      - "passwd"
      - "Option"
      - "Modification"
      properties:
        id:
          type: "string"
        passwd:
          type: "string"
        Option:
          type: "integer"
        Modification:
          type: "string"
          
    UserQuery:
      type: "object"
      required:
      - "query"
      - "lang"
      - "user_id"
      - "passwd"
      properties:
        query:
          type: "string"
        lang:
          type: "string"
        user_id:
          type: "string"
        passwd:
          type: "string"